spring.application.name=pizza

# Force HTTPS in production
server.forward-headers-strategy=framework
server.tomcat.redirect-context-root=false

# Server configuration
server.port=${PORT:8080}

# Database configuration - Use individual Railway environment variables
spring.datasource.url=jdbc:postgresql://${PGHOST}:${PGPORT}/${PGDATABASE}
spring.datasource.username=${PGUSER}
spring.datasource.password=${PGPASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false

# Logging configuration
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.com.pizza.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.root=DEBUG
logging.level.org.springframework=DEBUG
logging.level.com.pizza=DEBUG

# JWT Configuration
jwt.secret=${JWT_SECRET:your-very-long-secret-string-at-least-32-characters-long}
jwt.expiration=${JWT_EXPIRATION:86400000}

# CORS configuration
spring.web.cors.allowed-origins=${ALLOWED_ORIGINS:*}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration

# # HikariCP settings for connection timeout and idle timeout
# spring.datasource.hikari.connection-timeout=30000 # milliseconds (e.g., 30 seconds)
# spring.datasource.hikari.idle-timeout=600000 # milliseconds (e.g., 10 minutes)
# spring.datasource.hikari.max-lifetime=1800000 # milliseconds (e.g., 30 minutes)

# # HikariCP settings for maximum pool size and minimum idle connections
# spring.datasource.hikari.maximum-pool-size=10 # Adjust based on your application's needs
# spring.datasource.hikari.minimum-idle=5 # Keep a few connections ready

# # HikariCP settings for connection testing and validation
# spring.datasource.hikari.connection-test-query=SELECT 1 # Simple query to test connection health
# spring.datasource.hikari.test-on-borrow=true # Test connection before giving it to the application
# spring.datasource.hikari.test-while-idle=true # Test idle connections periodically

# # Spring Retry (if you want to implement application-level retry logic)
# spring.retry.enabled=true
# spring.retry.max-attempts=5 # Number of times to retry an operation
# spring.retry.delay=1000 # Delay in milliseconds between retries
# spring.retry.multiplier=2.0 # Multiplier to the delay for subsequent retries (exponential backoff)
# spring.retry.max-delay=60000 # Maximum delay between retries